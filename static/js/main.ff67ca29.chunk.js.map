{"version":3,"sources":["components/Section/Section.js","components/ButtonFeedback/ButtonFeedback.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","ButtonFeedback","increment","type","name","onClick","Statistics","total","goodPercentage","state","good","neutral","bad","Notification","message","App","Increment","e","setState","prevState","target","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAiBeA,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,qCACE,6BAAKD,IACJC,MCgBQC,EApBQ,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACxB,OACE,qCACE,wBAAQC,KAAK,SAASC,KAAK,OAAOC,QAASH,EAA3C,kBAGA,wBAAQC,KAAK,SAASC,KAAK,UAAUC,QAASH,EAA9C,qBAGA,wBAAQC,KAAK,SAASC,KAAK,MAAMC,QAASH,EAA1C,qBCsBSI,EA/BI,SAAC,GAIb,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,eAEI,IADJC,MAASC,EACL,EADKA,KAAMC,EACX,EADWA,QAASC,EACpB,EADoBA,IAExB,OACE,mCACE,+BACE,yCAAYF,KACZ,4CAAeC,KACf,wCAAWC,KACX,0CAAaL,KACb,sDAAyBC,EAAzB,cCNOK,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCgE3BC,G,kNA1DbN,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPI,UAAY,SAACC,GACX,EAAKC,UAAS,SAACC,GACb,OAAO,eAAGF,EAAEG,OAAOhB,KAAOe,EAAUF,EAAEG,OAAOhB,MAAQ,O,EAmBzDiB,mBAAqB,WACnB,OAAO,EAAKZ,MAAMC,KAAO,EAAKD,MAAME,QAAU,EAAKF,MAAMG,K,EAG3DU,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,EAAKf,MAAMC,KAAO,EAAKW,qBAAwB,M,4CAGpE,WACE,OACE,gCACE,cAAC,EAAD,CAAStB,MAAO,wBAAhB,SACE,cAAC,EAAD,CAAgBG,UAAWuB,KAAKT,cAGlC,cAAC,EAAD,CAASjB,MAAO,aAAhB,SACG0B,KAAKJ,qBACJ,cAAC,EAAD,CACEd,MAAOkB,KAAKJ,qBACZb,eAAgBiB,KAAKH,kCACrBb,MAAOgB,KAAKhB,QAGd,cAAC,EAAD,CAAcK,QAAS,+B,GAnDjBY,cCHlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ff67ca29.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <>\n      <h2>{title}</h2>\n      {children}\n    </>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.object.isRequired,\n};\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ButtonFeedback = ({ increment }) => {\n  return (\n    <>\n      <button type=\"button\" name=\"good\" onClick={increment}>\n        good\n      </button>\n      <button type=\"button\" name=\"neutral\" onClick={increment}>\n        neutral\n      </button>\n      <button type=\"button\" name=\"bad\" onClick={increment}>\n        bad\n      </button>\n    </>\n  );\n};\n\nButtonFeedback.propTypes = {\n  increment: PropTypes.func.isRequired,\n};\n\nexport default ButtonFeedback;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({\n  total,\n  goodPercentage,\n  state: { good, neutral, bad },\n}) => {\n  return (\n    <>\n      <ul>\n        <li>good : {good}</li>\n        <li>neutral : {neutral}</li>\n        <li>bad : {bad}</li>\n        <li>Total : {total}</li>\n        <li>Positive feedback : {goodPercentage} %</li>\n      </ul>\n    </>\n  );\n};\n\nStatistics.propTypes = {\n  total: PropTypes.number.isRequired,\n  goodPercentage: PropTypes.number.isRequired,\n  state: PropTypes.shape(\n    PropTypes.number.isRequired\n    // {\n    // good: PropTypes.number.isRequired,\n    // neutral: PropTypes.number.isRequired,\n    // bad: PropTypes.number.isRequired,\n    // }\n  ).isRequired,\n};\n\nexport default Statistics;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from \"react\";\nimport Section from \"./components/Section\";\nimport ButtonFeedback from \"./components/ButtonFeedback\";\nimport Statistics from \"./components/Statistics\";\nimport Notification from \"./components/Notification\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  Increment = (e) => {\n    this.setState((prevState) => {\n      return { [e.target.name]: prevState[e.target.name] + 1 };\n    });\n    // if (e.target.name === \"good\") {\n    //   this.setState((prevState) => ({\n    //     good: prevState.good + 1,\n    //   }));\n    // }\n    // if (e.target.name === \"neutral\") {\n    //   this.setState((prevState) => ({\n    //     neutral: prevState.neutral + 1,\n    //   }));\n    // }\n    // if (e.target.name === \"bad\") {\n    //   this.setState((prevState) => ({\n    //     bad: prevState.bad + 1,\n    //   }));\n    // }\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n  };\n\n  render() {\n    return (\n      <div>\n        <Section title={\"Please leave feedback\"}>\n          <ButtonFeedback increment={this.Increment} />\n        </Section>\n\n        <Section title={\"Statistics\"}>\n          {this.countTotalFeedback() ? (\n            <Statistics\n              total={this.countTotalFeedback()}\n              goodPercentage={this.countPositiveFeedbackPercentage()}\n              state={this.state}\n            />\n          ) : (\n            <Notification message={\"No feedback given\"} />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}